swagger: "2.0"
info:
  title: E-NoteHub APIs Documentation
  description: A E-NoteHub application is a software tool designed to help users create, manage, and organize notes
  version: 1.0
  contact:
    email: enotehub@gmail.com
  servers:
    -url: http://localhost:5000
    description: My local Server
schemes: [https, http]

# Definitions for all schemas
definitions:
  User:
    type: object
    properties:
      _id:
        type: string
      fullName:
        type: string
      email:
        type: string
      password:
        type: string
      profileImg:
        type: string
      verificationToken:
        type: string
      isVerified:
        type: boolean
    required:
      - fullName
      - email
      - password
  Note:
    type: object
    properties:
      _id:
        type: string
      title:
        type: string
      answers:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/Tag"
      user:
        $ref: "#/definitions/User"
      workspace:
        $ref: "#/definitions/Workspace"
      createdAt:
        type: string
        format: date-time

  Workspace:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      creator:
        $ref: "#/definitions/User"
      collaborators:
        type: array
        items:
          $ref: "#/definitions/User"
  Tag:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      user:
        $ref: "#/definitions/User"
      workspace:
        $ref: "#/definitions/Workspace"
  OTP:
    type: object
    properties:
      _id:
        type: string
      email:
        type: string
      otp:
        type: string
      createdAt:
        type: string
        format: date-time

paths:
  # Registration API
  /api/auth/signup:
    post:
      summary: Register a new user
      description: Register a new user with the provided information.
      parameters:
        - in: body
          name: user
          description: The user object containing registration details.
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: User registered successfully
        400:
          description: Bad request
      consumes:
        - application/json
      produces:
        - application/json
  # Email Verification API
  /api/auth/verify/{id}/{token}:
    get:
      summary: Verify User Email
      description: Verify user email using the provided verification token.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Verification Token
      responses:
        200:
          description: Email verified successfully
        400:
          description: Bad request
  # Signin API
  /api/auth/signin:
    post:
      summary: User Sign In
      description: Sign in a user using email and password.
      parameters:
        - in: body
          name: userData
          description: User's sign in credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
      responses:
        200:
          description: Sign in successful
        400:
          description: Bad request
        401:
          description: Unauthorized
  #Get All User
  /api/user/:
    get:
      summary: Get all users
      description: Retrieves a list of all users.
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        500:
          description: Internal server error
  #Update User Profile
  /api/user/update-user/{id}:
    put:
      summary: Update User Profile
      description: Update user's profile information, including name, email, password, and profile image.
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
        - in: userData
          name: fullName
          type: string
          description: New user's name (optional)
        - in: userData
          name: email
          type: string
          description: New email address (optional)
        - in: userData
          name: password
          type: string
          description: New password (optional)
        - in: userData
          name: profileImg
          type: file
          description: New profile image (optional)
      responses:
        200:
          description: User profile updated successfully
        400:
          description: Bad request
        404:
          description: User not found
  # Send OTP in Email Api
  /api/otp/send-otp:
    post:
      summary: Send OTP
      description: Send a One-Time Password (OTP) to the user's email address.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: requestBody
          description: Request body containing user's email.
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address to send OTP.
      responses:
        200:
          description: OTP sent successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  # Verify OTP Code API
  /api/otp/verify-otp:
    post:
      summary: Verify OTP
      description: Verify the One-Time Password (OTP) provided by the user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: requestBody
          description: Request body containing user's email and OTP.
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address.
              otp:
                type: string
                description: One-Time Password (OTP) received by the user.
      responses:
        200:
          description: OTP verified successfully
        400:
          description: Bad request
        401:
          description: Unauthorized (invalid OTP)
        500:
          description: Internal server error
          

